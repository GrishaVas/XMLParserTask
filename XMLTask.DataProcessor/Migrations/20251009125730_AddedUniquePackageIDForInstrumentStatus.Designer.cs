// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XMLTask.DataProcessor.Infrastructure;

#nullable disable

namespace XMLTask.DataProcessor.Migrations
{
    [DbContext(typeof(XMLTaskDbContext))]
    [Migration("20251009125730_AddedUniquePackageIDForInstrumentStatus")]
    partial class AddedUniquePackageIDForInstrumentStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("XMLTask.DataProcessor.Infrastructure.Entities.CombinedStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CombinedStatusType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBusy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsError")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReady")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("KeyLock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModuleState")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RapidControlStatusId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RapidControlStatusId")
                        .IsUnique();

                    b.ToTable("CombinedStatuses");

                    b.HasDiscriminator<int>("CombinedStatusType").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("XMLTask.DataProcessor.Infrastructure.Entities.DeviceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("IndexWithinRole")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("InstrumentStatusId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModuleCategoryID")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentStatusId");

                    b.ToTable("DeviceStatuses");
                });

            modelBuilder.Entity("XMLTask.DataProcessor.Infrastructure.Entities.InstrumentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PackageID")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PackageID")
                        .IsUnique();

                    b.ToTable("InstrumentStatuses");
                });

            modelBuilder.Entity("XMLTask.DataProcessor.Infrastructure.Entities.RapidControlStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceStatusId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceStatusId")
                        .IsUnique();

                    b.ToTable("RapidControlStatuses");
                });

            modelBuilder.Entity("XMLTask.DataProcessor.Infrastructure.Entities.CombinedOvenStatus", b =>
                {
                    b.HasBaseType("XMLTask.DataProcessor.Infrastructure.Entities.CombinedStatus");

                    b.Property<bool>("Buzzer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaximumTemperatureLimit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OvenOn")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TemperatureActual")
                        .HasColumnType("REAL");

                    b.Property<double>("TemperatureRoom")
                        .HasColumnType("REAL");

                    b.Property<bool>("UseTemperatureControl")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ValvePosition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ValveRotations")
                        .HasColumnType("INTEGER");

                    b.ToTable("CombinedStatuses", t =>
                        {
                            t.Property("Buzzer")
                                .HasColumnName("CombinedOvenStatus_Buzzer");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("XMLTask.DataProcessor.Infrastructure.Entities.CombinedPumpStatus", b =>
                {
                    b.HasBaseType("XMLTask.DataProcessor.Infrastructure.Entities.CombinedStatus");

                    b.Property<int>("Channel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Flow")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MaximumPressureLimit")
                        .HasColumnType("REAL");

                    b.Property<int>("MinimumPressureLimit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mode")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<int>("PercentB")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PercentC")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PercentD")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Pressure")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PumpOn")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("XMLTask.DataProcessor.Infrastructure.Entities.CombinedSamplerStatus", b =>
                {
                    b.HasBaseType("XMLTask.DataProcessor.Infrastructure.Entities.CombinedStatus");

                    b.Property<bool>("Buzzer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaximumInjectionVolume")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RackInf")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RackL")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<string>("RackR")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Vial")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<int>("Volume")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("XMLTask.DataProcessor.Infrastructure.Entities.CombinedStatus", b =>
                {
                    b.HasOne("XMLTask.DataProcessor.Infrastructure.Entities.RapidControlStatus", null)
                        .WithOne("CombinedStatus")
                        .HasForeignKey("XMLTask.DataProcessor.Infrastructure.Entities.CombinedStatus", "RapidControlStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XMLTask.DataProcessor.Infrastructure.Entities.DeviceStatus", b =>
                {
                    b.HasOne("XMLTask.DataProcessor.Infrastructure.Entities.InstrumentStatus", null)
                        .WithMany("DeviceStatuses")
                        .HasForeignKey("InstrumentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XMLTask.DataProcessor.Infrastructure.Entities.RapidControlStatus", b =>
                {
                    b.HasOne("XMLTask.DataProcessor.Infrastructure.Entities.DeviceStatus", null)
                        .WithOne("RapidControlStatus")
                        .HasForeignKey("XMLTask.DataProcessor.Infrastructure.Entities.RapidControlStatus", "DeviceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XMLTask.DataProcessor.Infrastructure.Entities.DeviceStatus", b =>
                {
                    b.Navigation("RapidControlStatus");
                });

            modelBuilder.Entity("XMLTask.DataProcessor.Infrastructure.Entities.InstrumentStatus", b =>
                {
                    b.Navigation("DeviceStatuses");
                });

            modelBuilder.Entity("XMLTask.DataProcessor.Infrastructure.Entities.RapidControlStatus", b =>
                {
                    b.Navigation("CombinedStatus");
                });
#pragma warning restore 612, 618
        }
    }
}
